" Mininimum settings {{{
"=== Min settings === 
" 'set nocompatible' is never necessary in a vimrc file. When Vim detects a user vimrc file, it automatically sets nocompatible. 
set encoding=utf-8
if has("autocmd")
  filetype plugin indent on
endif
set <esc>=jk "" my inline comment in a set command
set number
set relativenumber " also Ctrl N to toggle this
set virtualedit=all " allows cursor to be moved anywhere in normal mode
" set textwidth=0
set wrapmargin=5
set noswapfile
" to make numbered list
vnoremap <leader>1 :s/^\s*\zs/\=(line('.') - line("'<")+1).'. '<CR>
ab i I
ab wiht with
ab dont don't
ab cant can't
ab wont won't

" use Ctrl / to comment
nnoremap C-l gcc

"}}}
" Spaces And Tabs {{{ 
"=== Spaces And Tabs ===
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
" set wm=30           " wrap text before too far to the right
" }}}
" UI Config {{{
"===  UI Config ===
" Enter command line mode using spacebar
nnoremap <space> :
set wildmenu            " visual autocomplete for command menu
"allow  yanked text to be copied to the X11 system clipboard....
set clipboard=unnamedplus
" set clipboard=unnamed
" turn off highlight at underscore in .md files 

" remove highlight to the _ in markdown (very annoying) (not fixed - 2020-10-02)
" :syn clear markdownError works in a live buffer but how to add to .vimrc?
" :hi link markdownError normal  works in a live buffer but how to add to .vimrc?
" the following no longer seems to do the trick - 2020-10-02
" autocmd FileType markdown syntax clear markdownError 
" autocmd FileType markdown syntax match markdownIgnore ".*\d_\d.*"
" au BufNewFile,BufFilePre,BufRead *.md :syntax clear markdownError
" au BufNewFile,BufFilePre,BufRead *.md syntax match markdownIgnore ".*\d_\d.*"
" au BufNewFile,BufFilePre,BufRead *.md syntax match markdownIgnore ".*\d_\d.*"

" toggle number and realativenumber
nnoremap <C-n> :exe 'set nu!' &nu ? 'rnu!' : ''
" Enable CursorLine
" set cursorline
" Default Colors for CursorLine
" highlight  CursorLine ctermfg=white ctermbg=blue
" set cursorcolumn
" }}}
" Searching {{{
"=== Searching ===
set incsearch 
set ignorecase            " Make searches case-insensitive.
set smartcase
" }}}
" Folding {{{
" https://dougblack.io/words/a-good-vimrc.html#fold
"=== folding ===
" does not include markdown folding to enable headings to be visible with let g:markdown_folding = 1
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
set foldlevelstart=1   " start with fold level of 1
" }}}
" Custom Movements {{{
    "=== Custom Movements ===
"navigation tips
"    H – Go to the first line of current screen. But see noremaps below.
"    M – Go to the middle line of current screen. 
"    L – Go to the last line of current screen. But see noremaps below.
"    ctrl+F – Jump forward one full screen.
"    ctrl+B – Jump backwards one full screen
"    ctrl+D – Jump forward (down) a half screen
"    ctrl+U – Jump back (up) one half screen
" move to beginning B /end E of line
nnoremap B ^
nnoremap E $
"set the cursor to move down a single row on the screen
nnoremap j gj
nnoremap k gk
" Use (UPPERCASE) H and L to move to the previous/next tabpage & tab & tabs and next
" tab and previous tab
nnoremap H gT
nnoremap L gt
"
" TRY THIS: save like my doom-emacs keybindings [SPC] w [SPC]
" (This works because SPACEBAR is mapped to : above and cmap puts vim into Ex mode )
cmap w<space> :w<cr>
" even shorter journey to s
cmap s<space> :w<cr>
"
" write/quit with :ww and :xx
cmap ww :wq<cr>
cmap xx :q!<cr>
"
"
" splits - use ctrl-h/j/k/l to switch between splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
" }}}
" Packages using Packpath {{{
" This is for using the package manager that utilises the folder
" $HOME/.vim/pack - introduced by me in 2019
" see "=== Preferred Plugins === below for my list of usually installed plugins
" === packpath ===
" load packpath
filetype off
packloadall
syntax on
filetype plugin on
" filetype plugin indent on
" }}}
" Theme & Colors {{{
" === Theme  & Colors ===
set termguicolors
syntax enable
colorscheme stellarized
set background=dark
    "to toggle them automatically for you:
    map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" to allow italics in vim
highlight Comment cterm=italic
" }}}
" Custom Leader {{{
" === Custom Leader ===
" See also Customised below
" setting custom leader to comma
let mapleader="," 
" use ,o to make a new vertical split, ,s for horiz, ,x to close a split
    " ,v calls up VISUAL mode
" try ,o (as in OpEd) <-- works
" splits - to make a new split & quit split -  ,vf and ,hv to go to file
noremap <leader>o <c-w>v<c-w>l
noremap <leader>h <c-w>s<c-w>j
noremap <leader>x <c-w>c
"  save file
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>
" quit file
noremap <leader>q :q<cr>
" use <leader>p to paste from system clipboard
nnoremap <leader>p :set paste<cr>"+p :set nopaste<cr>
" use <leader>f to call up ranger file manager
let g:ranger_map_keys = 0
map <leader>f :Ranger<cr>
"python
"shortcut for if __name__  = ,m
autocmd Filetype python inoremap <leader>n if __name__ ==  "__main__":<enter>
" remove trailing whitespace from python files
autocmd BufWritePre *.py :%s/\s\+$//e
"
" open the file under the cursor in a new window
    nnoremap <leader>vf :vertical wincmd f<CR>
    nnoremap <leader>hf :below wincmd f<CR>
    " nav the command mode - up and down for previous commands
    cmap <C-j> <Down>
    cmap <C-k> <Up>
    cmap <C-h> <Left>
    cmap <C-l> <Right>
    " open $MYVIMRC in a new tab
    noremap <leader>m :tabe $MYVIMRC<CR>
    " source $MYVIMRC
    nnoremap <Leader>r :so $MYVIMRC<CR>
    "To insert the absolute path of the directory the file is in use:
    inoremap <Leader>n <C-R>=expand("%:p:h")<CR>
      " To insert the name of the innermost directory (the one containing the current file) use:
    " inoremap <Leader>n <C-R>=expand("%:p:h:t")<CR>
     " easymotion keybindings - for fast navigation within a file
     " nmap f <Plug>(easymotion-overwin-f2) " this doesn't work properly
    " get , , w to make easy motion work
     " map <Leader><Leader>w <Plug>(easymotion-prefix)
     " highlight ALL words for navigating to
     map <leader>/ <Plug>(easymotion-bd-w) 
     nmap <leader>/ <Plug>(easymotion-overwin-w) 
     " enter the pwd in insert mode - d irectory p ath
     :inoremap <leader>dp <C-R>=getcwd()<CR>
    " }}}
    " Status line {{{
    "=== Status line ===
    " NOTE: replaced by airline plugin (similar to Powerline in zsh)
    "}}}
    " Vimrc Folding {{{
    " === vimrc folding settings ===
    set foldmethod=marker
    set foldlevel=0
    set modelines=1
    "vim:foldmethod=marker:foldlevel=0
    "}}}
   "Preferred Plugins {{{
   " "=== Preferred Plugins === 
   " Rundown of good plugins available at https://catonmat.net/vim-plugins
   " --- My Preferred Plugins ---  
   " tpope
   " https://github.com/tpope/vim-surround.git  
   " https://github.com/tpope/vim-commentary.git  
   "
   " francoiscabrol
   " https://github.com/francoiscabrol/ranger.vim.git
   " vim-ranger
   " map <leader>f :Ranger<CR>
   "
   " theme
   " .vim/pack/nightsense/start
   " https://github.com/nightsense/stellarized.git
   "
   " airline - powerline for vim
   " https://github.com/vim-airline/vim-airline.git
   "
   " markdown
   " .vim/pack/
   " masukomi
   " vim-markdown-folding
   " https://github.com/masukomi/vim-markdown-folding.git
   "
   " vim-markdown
   " .vim/pack/vim-markdown/start/vim-markdown
   " git clone https://github.com/plasticboy/vim-markdown.git
   "
   "
   "vim-pencil
   " pure typing / writing experience for vim text files
   " git clone https://github.com/reedes/vim-pencil
   "
   "
   " mattn
   " emmet-vim
   " https://github.com/mattn/emmet-vim.git
   "
   "multicursor
   "https://github.com/terryma/vim-multiple-cursors
   "
   "Voom
   "sudo pamac install vim-voom
   "
   "SuperMan
   "Man pages in vim editor: vman <app>
   "https://github.com/jez/vim-superman
   "
   "peekaboo
   "let's you see the regs
   "https://github.com/junegunn/vim-peekaboo
   "
   "easymotion
   " using ,/ to move to highlighted letter
   "https://github.com/easymotion/vim-easymotion.git
   "
   "}}}
   " Customised {{{
   " "=== Customised === 
   " Add header to .py file when starting a .py file
   au bufnewfile *.py 0r /home/donagh/PORTABLE_ENV/vim/py_header.temp
   " for the vim-notes plugin. ~/.vim/misc/notes/user
    " adds .txt suffix to new notes
    :let g:notes_directories = ['/home/donagh/PORTABLE_ENV/Notes', '/home/donagh/.vim/misc/notes/user']
    :let g:notes_suffix = '.txt'

    " Splits - change default position of new splits
    set splitbelow splitright
    "
    " open a terminal within vim
    map <leader>tt :terminal<CR>
    "
    "Swap vertical split to hor
    map <leader>th <C-w>t<C-w>H
    map <leader>tk <C-w>t<C-w>K
    " Capitalize/minusculize letter under cursor
    nnoremap <leader>u v~
    " MY FUNCTIONS - sample function
    function Simple()
        echom "Running simple function"
    endfunction
    nnoremap <C-l>, :call Simple()<CR>


