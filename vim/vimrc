" Mininimum settings {{{
"=== Min settings === 
" 'set nocompatible' is never necessary in a vimrc file. When Vim detects a user vimrc file, it automatically sets nocompatible. 
" set backspace=start,eol,indent " no longer needed
set encoding=utf-8
" open a file in a new tab
map gf :tabe <cfile><cr>
" test gf with: /run/media/donaghm/01d4c077-4709-4b5b-9431-087bc9060d68/REPOSITORIES/TESTING/afile.md
" :bn without pressing enter button to make it like doom-emacs setting
" map :bn :bn<cr> " did not work (because :bn is an ex command try the following)
" cnoremap :bn :bn<cr> 
if has("autocmd")
  filetype plugin indent on
endif
set <esc>=jk " an inline comment " certain problems with this, why? A. Due to next settings
" to reduce the noticeable delay on performing certain commands
set timeout timeoutlen=3000 ttimeoutlen=100
set completeopt=menu,preview,longest "for a pop-up list of completions. (Replaces the existing one)
set number
set relativenumber " also Ctrl N to toggle this
"This mapping makes macros even easier to remember: hit qq to record, q to stop recording, and Q to apply.
nnoremap Q @@
vnoremap Q :norm @q<cr>
set virtualedit=all " allows cursor to be moved anywhere in normal mode
" set textwidth=0
set wrapmargin=5
set noswapfile " prevents the automatic creation of swapfiles
set hidden    " allows switching buffers without saving
set listchars=tab:>\ ,trail:.
set nolist    " adds a . to empty spaces; do I need this? "set list will show the dots for spaces and tabs
" FZF
" :FZF 
" set the following to get fuzzy-finder FZF in vim working (and other plugins?)
cmap <leader>z :FZF<cr> 

" usage: see $VIMRUNTIME/docs/fzf.txt :FZF and :h fzf
set rtp+=/usr/share/vim/vim82
" setting custom leader to comma
let mapleader=','
" netrw stuff - file browser
let g:netrw_banner = 0 " don't show the banner at the top of the :Vex window, it looks cleaner
let g:netrw_browse_split = 3 " open selected files in a new tab
let g:netrw_liststyle = 3
let g:netrw_winsize = 30
" shortcut to open a :Vex on the right only 20% width of screen
nnoremap <leader>e :lefta 30vs. <cr>
" set previewpopup=height:10,width:60
" set mouse+=a " copy lines without line numbers
" to make numbered list - keybinding not working?
vnoremap <leader>1 :s/^\s*\zs/\=(line('.') - line("'<")+1).'. '<CR>j
" Goyo & limelight toggle together - see gh for instructions to change this
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
" Toggle goyo & limelight
map <F9> :Goyo <cr>
nnoremap <leader>gy :Goyo <cr>
" use emmet for html and css only
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
" setting custom leader to comma
" let mapleader="," 
" }}}
" Spaces And Tabs {{{ 
"=== Spaces And Tabs ===
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
" set wm=30           " wrap text before too far to the right
" }}}
" UI Config {{{
"===  UI Config ===
" Enter command line mode using spacebar
nnoremap <space> :
set wildmenu            " visual autocomplete for command menu
"allow  yanked text to be copied directly to the X11 system clipboard....not
" having to use the "+ register
set clipboard=unnamedplus
" make Y copy from cursor position to end of line (like C, D)
nnoremap Y y$

" turn off highlight at underscore in .md files 
" remove highlight to the _ in markdown (very annoying) (not fixed - 2020-10-02)
" :syn clear markdownError works in a live buffer but how to add to .vimrc?
" :hi link markdownError normal  works in a live buffer but how to add to .vimrc?
" the following no longer seems to do the trick - 2020-10-02
" autocmd FileType markdown syntax clear markdownError 
" autocmd FileType markdown syntax match markdownIgnore ".*\d_\d.*"
" au BufNewFile,BufFilePre,BufRead *.md :syntax clear markdownError
" au BufNewFile,BufFilePre,BufRead *.md syntax match markdownIgnore ".*\d_\d.*"
" au BufNewFile,BufFilePre,BufRead *.md syntax match markdownIgnore ".*\d_\d.*"

" toggle number and realativenumber
nnoremap <C-n> :exe 'set nu!' &nu ? 'rnu!' : ''
" Enable CursorLine
" set cursorline
" Default Colors for CursorLine
" highlight  CursorLine ctermfg=white ctermbg=blue
" set cursorcolumn
" removes the unwanted highlight on underscores in markdown
" set hi link markdownError Normal " error with link?
" }}}
" Searching {{{
"=== Searching ===
set incsearch 
set ignorecase            " Make searches case-insensitive.
set smartcase
set grepprg=/usr/sbin/rg         " use ripgrep instead of default grep
" set very magic for searching (i.e. no need to escape brackets and other special chars)
nnoremap / /\v
vnoremap / /\v
" }}}
" Folding {{{
" https://dougblack.io/words/a-good-vimrc.html#fold
"=== folding ===
" does not include markdown folding to enable headings to be visible with let g:markdown_folding = 1
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
set foldlevelstart=1   " start with fold level of 1
" }}}
" Custom Movements {{{
    "=== Custom Movements ===
"navigation tips
"    H – Go to the first line of current screen. But see noremaps below.
"    M – Go to the middle line of current screen. 
"    L – Go to the last line of current screen. But see noremaps below.
"    ctrl+F – Jump forward one full screen.
"    ctrl+B – Jump backwards one full screen
"    ctrl+D – Jump forward (down) a half screen
"    ctrl+U – Jump back (up) one half screen
" move to beginning B /end E of line
nnoremap B ^
nnoremap E $
"set the cursor to move down a single row on the screen instead of full sentence
nnoremap j gj
nnoremap k gk
" TABS
" Use (UPPERCASE) H and L to move to the previous/next tabpage & tab & tabs and next tab and previous tab
nnoremap H gT
nnoremap L gt
"
" Save to be the same as my doom-emacs keybindings [SPC] w [SPC]
" (REM: This works because SPACEBAR is mapped to : above and cmap puts vim into Ex mode )
cmap w<space> :w<cr>
" even shorter journey to s
cmap s<space> :w<cr>
"
" write/quit with :ww and :xx
cmap ww :wq<cr>
cmap xx :q!<cr>
" emacs kill buffer
cmap bk :wq<cr>
"
"}}}
" Packages using Packpath {{{
" This is for using the package manager that utilises the folder
" $HOME/.vim/pack - introduced by me in 2019
" see "=== Preferred Plugins === below for my list of usually installed plugins
" === packpath ===
" load packpath
filetype off
packloadall
syntax on
filetype plugin on
" filetype plugin indent on
" }}}
" Theme & Colors {{{
" === Theme  & Colors ===
set termguicolors
syntax enable
colorscheme stellarized
set background=dark
"to toggle them automatically for you:
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" to allow italics in vim
highlight Comment cterm=italic
" }}}
" Custom Leader {{{
" === Custom Leader ===
" See also Customised below
" use ,o to make a new vertical split, ,s for horiz, ,x to close a split
" ,v calls up VISUAL mode
" try ,o (as in OpEd) <-- works
" splits - to make a new split & quit split -  ,vf and ,hv to go to file
noremap <leader>o <c-w>v<c-w>l
noremap <leader>h <c-w>s<c-w>j
noremap <leader>x <c-w>c
" in splits - use ctrl-h/j/k/l to switch focus between splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
" noremap <leader>j <c-w>
"  save file
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>
" quit file
noremap <leader>q :q<cr>
" use <leader>p to paste from system clipboard
nnoremap <leader>p :set paste<cr>"+p :set nopaste<cr>
" use <leader>y to yank to system clipboard
nnoremap <leader>y "+y
" use <leader>f to call up ranger file manager
let g:ranger_map_keys = 0
map <leader>f :Ranger<cr>

" shorten the filepath for REPOSITORIES
" @r  <-- macro
"python
"shortcut for if __name__  = ,m
autocmd Filetype python inoremap <leader>n if __name__ ==  "__main__":<enter>
" remove trailing whitespace from python files
autocmd BufWritePre *.py :%s/\s\+$//e
"
" open the file under the cursor in a new window (split)
nnoremap <leader>vf :vertical wincmd f<CR>
nnoremap <leader>hf :below wincmd f<CR>
" set width of Explorer window to 60 smaller
nnoremap <leader>ws <C-w>60<
" nav the command mode - up and down for previous commands
cmap <C-j> <Down>
cmap <C-k> <Up>
cmap <C-h> <Left>
cmap <C-l> <Right>
" open $MYVIMRC in a new tab Note: in CLI the shortcut is vv.
noremap <leader>vv :tabe $MYVIMRC<CR>

" source $MYVIMRC
nnoremap <Leader>r :so $MYVIMRC<CR>
"To insert the absolute path of the directory the file is in use:
inoremap <Leader>n <C-R>=expand("%:p:h")<CR>
" To insert the name of the innermost directory (the one containing the current file) use:
" inoremap <Leader>n <C-R>=expand("%:p:h:t")<CR>
"
" EASYMOTION
" easymotion keybindings - for fast navigation within a file
" get , , w to make easy motion work
map <Leader><Leader>w <Plug>(easymotion-prefix)
" highlight ALL words for navigating to
map <leader>/ <Plug>(easymotion-bd-w) 
nmap <leader>/ <Plug>(easymotion-overwin-w) 
"PWD
" insert full filepath into current buffer in normal mode
nnoremap <leader>d :put=expand('%:p')<cr>
" nnoremap <leader>r 0dtRi$HOME/^[<80><fd>afSld " replace front paths with $HOME/REPOS/
" enter the pwd in insert mode - d irectory p ath
:inoremap <leader>dp <C-R>=getcwd()<CR>
" list buffers and ready for a number 
nnoremap gb :ls<cr>:b<space>


" }}}
" Airline {{{
"=== Status line ===
" NOTE: replaced by airline plugin (similar to Powerline in zsh)
" AIRLINE
" show other buffers in the status airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
" Show just the filename instead of the full path/name
let g:airline#extensions#tabline#fnamemod = ':t'
" airline fonts
" set guifont=Liberation\ Mono\ for\ Powerline\ 10 
set guifont="Source Code Pro for Powerline 10"
let g:airline_powerline_fonts = 1
"}}}
" Vimrc Folding {{{
" === vimrc folding settings ===
set foldmethod=marker
set foldlevel=0
set modelines=1
"vim:foldmethod=marker:foldlevel=0
"}}}
" Customised {{{
"
" "=== Customised === 
" Add header to .py file when starting a .py file
" augroup templates
  " au!
  " read in template files
  " autocmd BufNewFile *.py silent! execute '0r $HOME/PORTABLE_ENV/vim/py_header.temp'
" augroup END

" Command for skeleton files from .vim/templates
augroup skeletons
    au!
    autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
augroup END

" for the vim-notes plugin. ~/.vim/misc/notes/user
" adds .txt suffix to new notes
:let g:notes_directories = ['/home/donagh/PORTABLE_ENV/Notes', '/home/donagh/.vim/misc/notes/user']
:let g:notes_suffix = '.txt'

" Splits - change default position of new splits
set splitbelow splitright
"
" open a terminal within vim
map <leader>tt :terminal<CR>

" open today's markdown journal in a new tab
" map ,jj :tabe /home/donagh/DONAGHS/personal/journal/$(date +%Y)/$(date +%m)/$(date +%d)-$(date +%m).md<cr>
" /run/media/donagh/01d4c077-4709-4b5b-9431-087bc9060d68/DONAGHS/personal/journal/2022/02/03-02.md
map ,mj !mj
"
"Swap vertical split to hor
map <leader>th <C-w>t<C-w>H
map <leader>tk <C-w>t<C-w>K
" Capitalize/minusculize letter under cursor
nnoremap <leader>u v~
" MY FUNCTIONS - sample function
function! Simple()
echom "Running simple function"
endfunction
" nnoremap <C-l>, :call Simple()<CR> " this works

" make dash bullet points 
function! Bullet_dash()
   execute "normal!"."0i- \<Esc>j"
endfunction
nnoremap <leader>b :call Bullet_dash()<cr>


" create a new scratch buffer
function! Scratch()
    split
    noswapfile hide enew
    setlocal buftype=nofile
    setlocal bufhidden=hide
    "setlocal nobuflisted
    "lcd ~
    file scratch
endfunction
cmap bx :call Scratch()<cr> " doom-emacs like
" map <leader>c :call Scratch()<cr>

" open today's markdown journal in a new tab

function! Myjournal()
    " setlocal year=:!date +%Y
    " echom $year
    let year = strftime('%Y')
    let month = strftime('%m')
    let day = strftime('%d')
    let path = '/run/media/donagh/01d4c077-4709-4b5b-9431-087bc9060d68/DONAGHS/personal/journal/'.year.'/'.month
    let filen =  path.'/'.day.'-'.month.'.md'

    execute ":tabe ".filen
endfunction 

nmap mj :call Myjournal()<cr>

let $RC="$HOME/.vimrc" " alternative to $MYVIMRC


"}}}

" Keybindings collected {{{

" Normal Mode
" K             :: get vim help for the item under the cursor
" gf            :: open a new tab for the file under the cursor
" ,vv           :: open .vimrc
" ,tt           :: open a terminal in vim
" mj            :: open today's markdown journal in a new tab
" qq            :: to record 
" q             :: to stop recording
" Q             :: to run
" ,e            :: open a file search buffer on the left
" gy            :: Goyo
" Y             :: y$
" <C-n>         :: toggle number and realativenumber
" ,1            :: ?? to make numbered list - keybinding not working?

" Command Mode
" ,z            :: FZF
" }}}
"
" Enable / Disable Plugins {{{
" === Enable / Disable Plugins ===
" 2022-02-05 
" https://github.com/junegunn/vim-plug
" https://github.com/junegunn/vim-plug/wiki/tutorial
" Remember to :so % after adding a new Plug
call plug#begin('/home/donagh/.vim/plugins')
Plug 'tpope/vim-commentary'
Plug 'nightsense/stellarized'
Plug 'https://github.com/vim-airline/vim-airline.git'
Plug 'francoiscabrol/ranger.vim'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/goyo'
Plug 'junegunn/limelight'
call plug#end()
"
" }}}

" Preferred Plugins {{{
"
" "=== Preferred Plugins === 
" added vim-plug to manage plugins
" cd ~/.vim
" autoload  pack  plugins  spell
" autoload contains plug.vim
" pack/nightsense/start/stellarized
" plugins - this is the location for Plug to place other plugins
"
" OLD - OLD - OLD - OLD - OLD - OLD - OLD - OLD  
" donaghm [16:50 Tue 20/04] [~/.vim] 
" -> % tree -L 2
" .
" └── ~/.vim/pack/start   (symlinked from PORTABLE_ENV)
    " 1  ├── vim-surround
    " 2  ├── vim-commentary
    " 3  ├── ranger
    " 4  ├── nightsense (theme)
    " 5  ├── vim-airline
    " 6  ├── vim-markdown-folding - masukomi
    " 7  ├── vim-markdown - plasticboy
    " 8  ├── vim-pencil
    " 9  ├── emmet-vim
    " 10 ├── vim-multiple-cursors
    " 11 ├── vim-voom
    " 12 ├── vim-superman
    " 13 ├── peekaboo
    " 14 ├── easymotion
    " 15 ├── vim-elixir
    " 16 ├── vim-floaterm
    " 17 ├── vim-floaterm
    " 18 ├── janet-vim
    " 19 ├── goyo.vim
    " 20 └── limelight.vim
    " 21 └── vim-orgmode
    " 22 └── speeddating
    "
   " Note: Rundown of good plugins available at https://catonmat.net/vim-plugins
   " --- My Preferred Plugins ---  
   " tpope
   " https://github.com/tpope/vim-surround.git  
   " https://github.com/tpope/vim-commentary.git  
   "
   " francoiscabrol
   " https://github.com/francoiscabrol/ranger.vim.git
   " vim-ranger
   " map <leader>f :Ranger<CR>
   "
   " theme - nightsensee 
   " .vim/pack/nightsense/start
   " https://github.com/nightsense/stellarized.git
   "
   " airline - powerline for vim
   " https://github.com/vim-airline/vim-airline.git
   "
   " .vim/pack/
   " masukomi
   " vim-markdown-folding
   " https://github.com/masukomi/vim-markdown-folding.git
   "
   " md-folding
   " .vim/pack/vim-markdown/start/vim-markdown
   " git clone https://github.com/plasticboy/vim-markdown.git
   "
   "
   " vim-pencil
   " pure typing / writing experience for vim text files - kills default vim
   " multiline for j, k etc.
   " git clone https://github.com/reedes/vim-pencil
   "
   "
   " mattn
   " emmet-vim
   " use <C-y>, ! to have basic html:5 skeleton template
   " https://github.com/mattn/emmet-vim.git
   "
   " multicursor
   " https://github.com/terryma/vim-multiple-cursors
   "
   " Voom
   " sudo pamac install vim-voom
   "
   " SuperMan
   " Man pages in vim editor: vman <app>
   " https://github.com/jez/vim-superman
   "
   " peekaboo
   " let's you see the regs
   " https://github.com/junegunn/vim-peekaboo
   "
   " easymotion - <leader>/ will highlight file with letters everywhere
   " using ,/ to move to highlighted letter
   " https://github.com/easymotion/vim-easymotion.git
   "
   " vim-elixir
   " elixir plugin for vim
   " https://github.com/elixir-editors/vim-elixir
   "
   " floaterm
   " a floating terminal - not installed
   " https://github.com/voldikss/vim-floaterm
   "
   " janet.vim
   " plugin for janet syntax in vim
   " https://github.com/janet-lang/janet.vim.git
   "
   " Goyo
   " Make vim environment distraction free
   " https://github.com/junegunn/goyo.vim.git
   "
   " Limelight
   " Highlight only the active paragraph
   " https://github.com/junegunn/limelight.vim.git
   "
   " vim-orgmode
   " (prefers also to include speedating from tpope)
   " open .org files in vim
   " guide at /home/donaghm/PORTABLE_ENV/vim/dotvim/pack/vim-orgmode/start/vim-orgmode/doc/orgguide.txt
   "  https://github.com/jceb/vim-orgmode
   "
   " speedating
   " manages the - in dates like 2021-11-28 when opening say .org files
   "  https://github.com/tpope/vim-speeddating.git
   "
   "}}}
   " Runtimepath and path {{{
   " :set runtimepath?
let $RTP=split(&runtimepath, ',')[0] " allows :set rtp?
   "RUNTIMEPATH
    " /home/donaghm/.vim,/home/donaghm/.vim/pack/vim-pencil/start/vim-pencil,/home/donaghm/.vim/pack/vim-orgmode/start/vim-orgmode,/home/donaghm/.vim/pack/vim-markdown-folding/start/vim-markdown-folding,/home/donaghm/.vim/pack/vim-markdown/start/vim-markdown,/home/donaghm/.vim/pack/vim-elixir/start/vim-elixir,/home/donaghm/.vim/pack/vim-commentary/start/vim-commentary,/home/donaghm/.vim/pack/vim-airline/start/vim-airline,/home/donaghm/.vim/pack/speeddating/start/vim-speeddating,/home/donaghm/.vim/pack/ranger/start/ranger.vim,/home/donaghm/.vim/pack/peekaboo/start/vim-peekaboo,/home/donaghm/.vim/pack/nightsense/start/BU_stellarized,/home/donaghm/.vim/pack/limelight/start/limelight.vim,/home/donaghm/.vim/pack/janet-vim/start/janet.vim,/home/donaghm/.vim/pack/emoji-terroo/start/vim-simple-emoji,/home/donaghm/.vim/pack/easymotion/start/vim-easymotion,/home/donaghm/.vim/pack/Goyo/start/goyo.vim,/home/donaghm/.vim/pack/BUemmet/start/emmet-vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/home/donaghm/.vim/pack/vim-markdown-folding/start/vim-markdown-folding/after,/home/donaghm/.vim/pack/vim-markdown/start/vim-markdown/after,/usr/share/vim/vimfiles/after,/home/donaghm/.vim/after
    " Path
    " :set path?
set path+=~/REPOS/
" }}}
