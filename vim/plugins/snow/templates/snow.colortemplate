Author:          nightsense
Maintainer:      nightsense
License:         MIT
Full name:       snow
Short name:      snow
Terminal Colors: 256

Background: light
Color:      gry0 #fbffff ~
Color:      gry1 #e5ebf1 ~
Color:      gry2 #6d7782 ~
Color:      gry3 #535c65 ~
Color:      gryc #434951 ~
Color:      srch #e5bb7e ~
Color:      grys #434951 ~
Color:      gryp #afb7c0 ~
Color:      sprd #bc4d61 ~
Color:      spbl #007cc3 ~
Color:      spcy #008787 ~
Color:      spmg #965dae ~
Color:      red_ #ae5865 ~
Color:      gold #906c33 ~
Color:      gren #4d7f43 ~
Color:      cyan #008483 ~
Color:      blue #2b7ab2 ~
Color:      mgnt #8f63a2 ~
Include:    _common.colortemplate

verbatim
if has("nvim")
  let g:terminal_color_0 = "@guigry0"
  let g:terminal_color_1 = "@guired_"
  let g:terminal_color_2 = "@guigren"
  let g:terminal_color_3 = "@guigold"
  let g:terminal_color_4 = "@guiblue"
  let g:terminal_color_5 = "@guimgnt"
  let g:terminal_color_6 = "@guicyan"
  let g:terminal_color_7 = "@guigry3"
  let g:terminal_color_8 = "@guigry1"
  let g:terminal_color_9 = "@guired_"
  let g:terminal_color_10 = "@guigren"
  let g:terminal_color_11 = "@guigold"
  let g:terminal_color_12 = "@guiblue"
  let g:terminal_color_13 = "@guimgnt"
  let g:terminal_color_14 = "@guicyan"
  let g:terminal_color_15 = "@guigryc"
elseif has("terminal")
  let g:terminal_ansi_colors = [
      \ "@guigry0",
      \ "@guired_",
      \ "@guigren",
      \ "@guigold",
      \ "@guiblue",
      \ "@guimgnt",
      \ "@guicyan",
      \ "@guigry3",
      \ "@guigry1",
      \ "@guired_",
      \ "@guigren",
      \ "@guigold",
      \ "@guiblue",
      \ "@guimgnt",
      \ "@guicyan",
      \ "@guigryc"
  \ ]
endif
endverbatim

auxfile autoload/airline/themes/snow_light.vim
let g:airline#themes#snow_light#palette = {}

let s:gry0 = [ "@guigry0", @termgry0 ]
let s:gry1 = [ "@guigry1", @termgry1 ]
let s:gry3 = [ "@guigry3", @termgry3 ]
let s:red_ = [ "@guired_", @termred_ ]
let s:gren = [ "@guigren", @termgren ]
let s:blue = [ "@guiblue", @termblue ]

let s:nrm1 = [ s:gry0[0] , s:gry3[0] , s:gry0[1] , s:gry3[1] ]
let s:nrm2 = [ s:gry3[0] , s:gry1[0] , s:gry3[1] , s:gry1[1] ]
let s:insr = [ s:gry0[0] , s:gren[0] , s:gry0[1] , s:gren[1] ]
let s:visl = [ s:gry0[0] , s:blue[0] , s:gry0[1] , s:blue[1] ]
let s:rplc = [ s:gry0[0] , s:red_[0] , s:gry0[1] , s:red_[1] ]
let s:inac = [ s:gry3[0] , s:gry1[0] , s:gry3[1] , s:gry1[1] ]

let g:airline#themes#snow_light#palette.normal =
  \ airline#themes#generate_color_map( s:nrm1 , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_light#palette.insert =
  \ airline#themes#generate_color_map( s:insr , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_light#palette.visual =
  \ airline#themes#generate_color_map( s:visl , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_light#palette.replace =
  \ airline#themes#generate_color_map( s:rplc , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_light#palette.inactive =
  \ airline#themes#generate_color_map( s:inac , s:inac , s:inac )

if !get(g:, "loaded_ctrlp", 0)
  finish
endif

let g:airline#themes#snow_light#palette.ctrlp =
  \ airline#extensions#ctrlp#generate_color_map( s:nrm2 , s:nrm1 , s:nrm2 )
endauxfile

auxfile autoload/lightline/colorscheme/snow_light.vim
let s:gry0 = [ "@guigry0", @termgry0 ]
let s:gry1 = [ "@guigry1", @termgry1 ]
let s:gry3 = [ "@guigry3", @termgry3 ]
let s:red_ = [ "@guired_", @termred_ ]
let s:mgnt = [ "@guimgnt", @termmgnt ]
let s:gren = [ "@guigren", @termgren ]
let s:blue = [ "@guiblue", @termblue ]

let s:p = { "normal" : {} , "inactive": {} , "insert"  : {} ,
          \ "replace": {} , "visual"  : {} , "tabline" : {} }

let s:p.normal.left     = [[ s:gry0, s:gry3 ], [ s:gry3, s:gry1 ]]
let s:p.normal.middle   = [[ s:gry3, s:gry1 ]]
let s:p.normal.right    = [[ s:gry0, s:gry3 ], [ s:gry0, s:gry3 ]]

let s:p.inactive.left   = copy(s:p.normal.middle)
let s:p.inactive.middle = copy(s:p.normal.middle)
let s:p.inactive.right  = copy(s:p.normal.middle)

let s:p.insert.left     = [[ s:gry0, s:gren ]]
let s:p.insert.right    = [[ s:gry0, s:gren ], [ s:gry0, s:gren ]]

let s:p.visual.left     = [[ s:gry0, s:blue ]]
let s:p.visual.right    = [[ s:gry0, s:blue ], [ s:gry0, s:blue ]]

let s:p.replace.left    = [[ s:gry0, s:red_ ]]
let s:p.replace.right   = [[ s:gry0, s:red_ ], [ s:gry0, s:red_ ]]

let s:p.tabline.left    = copy(s:p.normal.middle)
let s:p.tabline.tabsel  = [[ s:gry0, s:gren ]]
let s:p.tabline.right   = copy(s:p.normal.middle)

let s:p.normal.error    = [[ s:red_, s:gry0 ]]
let s:p.normal.warning  = [[ s:mgnt, s:gry0 ]]

let g:lightline#colorscheme#snow_light#palette =
  \ lightline#colorscheme#flatten(s:p)
endauxfile

auxfile shell/snow_light.sh
#!/bin/sh
# base16-shell (https://github.com/chriskempson/base16-shell)
# Base16 Shell template by Chris Kempson (http://chriskempson.com)
# snow_light scheme by nightsense (https://github.com/nightsense/snow)

color00="@guigry0" # Base 00 - Black
color01="@guired_" # Base 08 - Red
color02="@guigren" # Base 0B - Green
color03="@guigold" # Base 0A - Yellow
color04="@guiblue" # Base 0D - Blue
color05="@guimgnt" # Base 0E - Magenta
color06="@guicyan" # Base 0C - Cyan
color07="@guigry3" # Base 05 - White
color08="@guigry1" # Base 03 - Bright Black
color09=$color01 # Base 08 - Bright Red
color10=$color02 # Base 0B - Bright Green
color11=$color03 # Base 0A - Bright Yellow
color12=$color04 # Base 0D - Bright Blue
color13=$color05 # Base 0E - Bright Magenta
color14=$color06 # Base 0C - Bright Cyan
color15="@guigryc" # Base 07 - Bright White
color_foreground="@guigry3" # Base 05
color_background="@guigry0" # Base 00

if [ -n "$TMUX" ]; then
  # Tell tmux to pass the escape sequences through
  # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
  put_template() { printf '\033Ptmux;\033\033]4;%d;rgb:%s\033\033\\\033\\' $@; }
  put_template_var() { printf '\033Ptmux;\033\033]%d;rgb:%s\033\033\\\033\\' $@; }
  put_template_custom() { printf '\033Ptmux;\033\033]%s%s\033\033\\\033\\' $@; }
elif [ "${TERM%%[-.]*}" = "screen" ]; then
  # GNU screen (screen, screen-256color, screen-256color-bce)
  put_template() { printf '\033P\033]4;%d;rgb:%s\007\033\\' $@; }
  put_template_var() { printf '\033P\033]%d;rgb:%s\007\033\\' $@; }
  put_template_custom() { printf '\033P\033]%s%s\007\033\\' $@; }
elif [ "${TERM%%-*}" = "linux" ]; then
  put_template() { [ $1 -lt 16 ] && printf "\e]P%x%s" $1 $(echo $2 | sed "s/\///g"); }
  put_template_var() { true; }
  put_template_custom() { true; }
else
  put_template() { printf '\033]4;%d;rgb:%s\033\\' $@; }
  put_template_var() { printf '\033]%d;rgb:%s\033\\' $@; }
  put_template_custom() { printf '\033]%s%s\033\\' $@; }
fi

# 16 color space
put_template 0  $color00
put_template 1  $color01
put_template 2  $color02
put_template 3  $color03
put_template 4  $color04
put_template 5  $color05
put_template 6  $color06
put_template 7  $color07
put_template 8  $color08
put_template 9  $color09
put_template 10 $color10
put_template 11 $color11
put_template 12 $color12
put_template 13 $color13
put_template 14 $color14
put_template 15 $color15

# foreground / background / cursor color
if [ -n "$ITERM_SESSION_ID" ]; then
  # iTerm2 proprietary escape codes
  put_template_custom Pg @guigry3 # foreground
  put_template_custom Ph @guigry0 # background
  put_template_custom Pi @guigry3 # bold color
  put_template_custom Pj @guiblue # selection color
  put_template_custom Pk @guigry0 # selected text color
  put_template_custom Pl @guigry3 # cursor
  put_template_custom Pm @guigry0 # cursor text
else
  put_template_var 10 $color_foreground
  if [ "$BASE16_SHELL_SET_BACKGROUND" != false ]; then
    put_template_var 11 $color_background
    if [ "${TERM%%-*}" = "rxvt" ]; then
      put_template_var 708 $color_background # internal border (rxvt)
    fi
  fi
  put_template_custom 12 ";7" # cursor (reverse video)
fi

# clean up
unset -f put_template
unset -f put_template_var
unset -f put_template_custom
unset color00
unset color01
unset color02
unset color03
unset color04
unset color05
unset color06
unset color07
unset color08
unset color09
unset color10
unset color11
unset color12
unset color13
unset color14
unset color15
unset color_foreground
unset color_background
endauxfile

auxfile shell/snow_light.fish
# snow_light fish shell theme by nightsense (https://github.com/nightsense/snow)

# normal text
set fish_color_host              @guigry3
set fish_color_normal            @guigry3
set fish_pager_color_completion  @guigry3
set fish_pager_color_description @guigry3

# muted text
set fish_color_autosuggestion    @guigry2
set fish_color_comment           @guigry2

# reverse muted
set fish_pager_color_progress    @guigry0 --background=@guigry2

# underlined text
set fish_color_valid_path        --underline

# highlit text
set fish_color_match             --background=@guigryp
set fish_color_search_match      --background=@guigryp
set fish_color_selection         --background=@guigryp

# red errors/warnings
set fish_color_cancel            @guired_
set fish_color_cwd_root          @guired_
set fish_color_error             @guired_

# gold special elements
set fish_color_redirection       @guigold
set fish_color_escape            @guigold
set fish_color_operator          @guigold
set fish_color_end               @guigold

# green commands/status
set fish_color_command           @guigren
set fish_color_cwd               @guigren
set fish_color_user              @guigren

# cyan parameters
set fish_color_param             @guicyan

# blue quoted strings
set fish_color_quote             @guiblue

# magenta pager name match
set fish_pager_color_prefix      @guimgnt
endauxfile

Background: dark
Color:      gry0 #2c2d30 ~
Color:      gry1 #363a3e ~
Color:      gry2 #8c95a0 ~
Color:      gry3 #afb7c0 ~
Color:      gryc #cbd2d9 ~
Color:      srch #ab916d ~
Color:      grys #2c2d30 ~
Color:      gryp #535c65 ~
Color:      sprd #df969e ~
Color:      spbl #7fb0df ~
Color:      spcy #5eb9b7 ~
Color:      spmg #c39dd1 ~
Color:      red_ #be868c ~
Color:      gold #ab916d ~
Color:      gren #7f9d77 ~
Color:      cyan #5da19f ~
Color:      blue #759abd ~
Color:      mgnt #a88cb3 ~
Include:    _common.colortemplate

verbatim
if has("nvim")
  let g:terminal_color_0 = "@guigry0"
  let g:terminal_color_1 = "@guired_"
  let g:terminal_color_2 = "@guigren"
  let g:terminal_color_3 = "@guigold"
  let g:terminal_color_4 = "@guiblue"
  let g:terminal_color_5 = "@guimgnt"
  let g:terminal_color_6 = "@guicyan"
  let g:terminal_color_7 = "@guigry3"
  let g:terminal_color_8 = "@guigry1"
  let g:terminal_color_9 = "@guired_"
  let g:terminal_color_10 = "@guigren"
  let g:terminal_color_11 = "@guigold"
  let g:terminal_color_12 = "@guiblue"
  let g:terminal_color_13 = "@guimgnt"
  let g:terminal_color_14 = "@guicyan"
  let g:terminal_color_15 = "@guigryc"
elseif has("terminal")
  let g:terminal_ansi_colors = [
      \ "@guigry0",
      \ "@guired_",
      \ "@guigren",
      \ "@guigold",
      \ "@guiblue",
      \ "@guimgnt",
      \ "@guicyan",
      \ "@guigry3",
      \ "@guigry1",
      \ "@guired_",
      \ "@guigren",
      \ "@guigold",
      \ "@guiblue",
      \ "@guimgnt",
      \ "@guicyan",
      \ "@guigryc"
  \ ]
endif
endverbatim

auxfile autoload/airline/themes/snow_dark.vim
let g:airline#themes#snow_dark#palette = {}

let s:gry0 = [ "@guigry0", @termgry0 ]
let s:gry1 = [ "@guigry1", @termgry1 ]
let s:gry3 = [ "@guigry3", @termgry3 ]
let s:red_ = [ "@guired_", @termred_ ]
let s:gren = [ "@guigren", @termgren ]
let s:blue = [ "@guiblue", @termblue ]

let s:nrm1 = [ s:gry0[0] , s:gry3[0] , s:gry0[1] , s:gry3[1] ]
let s:nrm2 = [ s:gry3[0] , s:gry1[0] , s:gry3[1] , s:gry1[1] ]
let s:insr = [ s:gry0[0] , s:gren[0] , s:gry0[1] , s:gren[1] ]
let s:visl = [ s:gry0[0] , s:blue[0] , s:gry0[1] , s:blue[1] ]
let s:rplc = [ s:gry0[0] , s:red_[0] , s:gry0[1] , s:red_[1] ]
let s:inac = [ s:gry3[0] , s:gry1[0] , s:gry3[1] , s:gry1[1] ]

let g:airline#themes#snow_dark#palette.normal =
  \ airline#themes#generate_color_map( s:nrm1 , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_dark#palette.insert =
  \ airline#themes#generate_color_map( s:insr , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_dark#palette.visual =
  \ airline#themes#generate_color_map( s:visl , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_dark#palette.replace =
  \ airline#themes#generate_color_map( s:rplc , s:nrm2 , s:nrm2 )

let g:airline#themes#snow_dark#palette.inactive =
  \ airline#themes#generate_color_map( s:inac , s:inac , s:inac )

if !get(g:, "loaded_ctrlp", 0)
  finish
endif

let g:airline#themes#snow_dark#palette.ctrlp =
  \ airline#extensions#ctrlp#generate_color_map( s:nrm2 , s:nrm1 , s:nrm2 )
endauxfile

auxfile autoload/lightline/colorscheme/snow_dark.vim
let s:gry0 = [ "@guigry0", @termgry0 ]
let s:gry1 = [ "@guigry1", @termgry1 ]
let s:gry3 = [ "@guigry3", @termgry3 ]
let s:red_ = [ "@guired_", @termred_ ]
let s:mgnt = [ "@guimgnt", @termmgnt ]
let s:gren = [ "@guigren", @termgren ]
let s:blue = [ "@guiblue", @termblue ]

let s:p = { "normal" : {} , "inactive": {} , "insert"  : {} ,
          \ "replace": {} , "visual"  : {} , "tabline" : {} }

let s:p.normal.left     = [[ s:gry0, s:gry3 ], [ s:gry3, s:gry1 ]]
let s:p.normal.middle   = [[ s:gry3, s:gry1 ]]
let s:p.normal.right    = [[ s:gry0, s:gry3 ], [ s:gry0, s:gry3 ]]

let s:p.inactive.left   = copy(s:p.normal.middle)
let s:p.inactive.middle = copy(s:p.normal.middle)
let s:p.inactive.right  = copy(s:p.normal.middle)

let s:p.insert.left     = [[ s:gry0, s:gren ]]
let s:p.insert.right    = [[ s:gry0, s:gren ], [ s:gry0, s:gren ]]

let s:p.visual.left     = [[ s:gry0, s:blue ]]
let s:p.visual.right    = [[ s:gry0, s:blue ], [ s:gry0, s:blue ]]

let s:p.replace.left    = [[ s:gry0, s:red_ ]]
let s:p.replace.right   = [[ s:gry0, s:red_ ], [ s:gry0, s:red_ ]]

let s:p.tabline.left    = copy(s:p.normal.middle)
let s:p.tabline.tabsel  = [[ s:gry0, s:gren ]]
let s:p.tabline.right   = copy(s:p.normal.middle)

let s:p.normal.error    = [[ s:red_, s:gry0 ]]
let s:p.normal.warning  = [[ s:mgnt, s:gry0 ]]

let g:lightline#colorscheme#snow_dark#palette =
  \ lightline#colorscheme#flatten(s:p)
endauxfile

auxfile shell/snow_dark.sh
#!/bin/sh
# base16-shell (https://github.com/chriskempson/base16-shell)
# Base16 Shell template by Chris Kempson (http://chriskempson.com)
# snow_dark scheme by nightsense (https://github.com/nightsense/snow)

color00="@guigry0" # Base 00 - Black
color01="@guired_" # Base 08 - Red
color02="@guigren" # Base 0B - Green
color03="@guigold" # Base 0A - Yellow
color04="@guiblue" # Base 0D - Blue
color05="@guimgnt" # Base 0E - Magenta
color06="@guicyan" # Base 0C - Cyan
color07="@guigry3" # Base 05 - White
color08="@guigry1" # Base 03 - Bright Black
color09=$color01 # Base 08 - Bright Red
color10=$color02 # Base 0B - Bright Green
color11=$color03 # Base 0A - Bright Yellow
color12=$color04 # Base 0D - Bright Blue
color13=$color05 # Base 0E - Bright Magenta
color14=$color06 # Base 0C - Bright Cyan
color15="@guigryc" # Base 07 - Bright White
color_foreground="@guigry3" # Base 05
color_background="@guigry0" # Base 00

if [ -n "$TMUX" ]; then
  # Tell tmux to pass the escape sequences through
  # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
  put_template() { printf '\033Ptmux;\033\033]4;%d;rgb:%s\033\033\\\033\\' $@; }
  put_template_var() { printf '\033Ptmux;\033\033]%d;rgb:%s\033\033\\\033\\' $@; }
  put_template_custom() { printf '\033Ptmux;\033\033]%s%s\033\033\\\033\\' $@; }
elif [ "${TERM%%[-.]*}" = "screen" ]; then
  # GNU screen (screen, screen-256color, screen-256color-bce)
  put_template() { printf '\033P\033]4;%d;rgb:%s\007\033\\' $@; }
  put_template_var() { printf '\033P\033]%d;rgb:%s\007\033\\' $@; }
  put_template_custom() { printf '\033P\033]%s%s\007\033\\' $@; }
elif [ "${TERM%%-*}" = "linux" ]; then
  put_template() { [ $1 -lt 16 ] && printf "\e]P%x%s" $1 $(echo $2 | sed "s/\///g"); }
  put_template_var() { true; }
  put_template_custom() { true; }
else
  put_template() { printf '\033]4;%d;rgb:%s\033\\' $@; }
  put_template_var() { printf '\033]%d;rgb:%s\033\\' $@; }
  put_template_custom() { printf '\033]%s%s\033\\' $@; }
fi

# 16 color space
put_template 0  $color00
put_template 1  $color01
put_template 2  $color02
put_template 3  $color03
put_template 4  $color04
put_template 5  $color05
put_template 6  $color06
put_template 7  $color07
put_template 8  $color08
put_template 9  $color09
put_template 10 $color10
put_template 11 $color11
put_template 12 $color12
put_template 13 $color13
put_template 14 $color14
put_template 15 $color15

# foreground / background / cursor color
if [ -n "$ITERM_SESSION_ID" ]; then
  # iTerm2 proprietary escape codes
  put_template_custom Pg @guigry3 # foreground
  put_template_custom Ph @guigry0 # background
  put_template_custom Pi @guigry3 # bold color
  put_template_custom Pj @guiblue # selection color
  put_template_custom Pk @guigry0 # selected text color
  put_template_custom Pl @guigry3 # cursor
  put_template_custom Pm @guigry0 # cursor text
else
  put_template_var 10 $color_foreground
  if [ "$BASE16_SHELL_SET_BACKGROUND" != false ]; then
    put_template_var 11 $color_background
    if [ "${TERM%%-*}" = "rxvt" ]; then
      put_template_var 708 $color_background # internal border (rxvt)
    fi
  fi
  put_template_custom 12 ";7" # cursor (reverse video)
fi

# clean up
unset -f put_template
unset -f put_template_var
unset -f put_template_custom
unset color00
unset color01
unset color02
unset color03
unset color04
unset color05
unset color06
unset color07
unset color08
unset color09
unset color10
unset color11
unset color12
unset color13
unset color14
unset color15
unset color_foreground
unset color_background
endauxfile

auxfile shell/snow_dark.fish
# snow_dark fish shell theme by nightsense (https://github.com/nightsense/snow)

# normal text
set fish_color_host              @guigry3
set fish_color_normal            @guigry3
set fish_pager_color_completion  @guigry3
set fish_pager_color_description @guigry3

# muted text
set fish_color_autosuggestion    @guigry2
set fish_color_comment           @guigry2

# reverse muted
set fish_pager_color_progress    @guigry0 --background=@guigry2

# underlined text
set fish_color_valid_path        --underline

# highlit text
set fish_color_match             --background=@guigryp
set fish_color_search_match      --background=@guigryp
set fish_color_selection         --background=@guigryp

# red errors/warnings
set fish_color_cancel            @guired_
set fish_color_cwd_root          @guired_
set fish_color_error             @guired_

# gold special elements
set fish_color_redirection       @guigold
set fish_color_escape            @guigold
set fish_color_operator          @guigold
set fish_color_end               @guigold

# green commands/status
set fish_color_command           @guigren
set fish_color_cwd               @guigren
set fish_color_user              @guigren

# cyan parameters
set fish_color_param             @guicyan

# blue quoted strings
set fish_color_quote             @guiblue

# magenta pager name match
set fish_pager_color_prefix      @guimgnt
endauxfile

auxfile shell/dircolors
                                  # file types displayed in normal text
                                  # ---------------------------------+----------
FIFO                     36       # pipe                             | cyan
EXEC                     32       # executable                       | green
ORPHAN                   31       # broken symlink                   | red


                                  # file types displayed in bold text
                                  # ---------------------------------+----------
DIR                   01          # directory                        | uncolored
SOCK                  01;35       # socket                           | magenta
DOOR                  01;35       # door                             | magenta
BLK                   01;36       # block device driver              | cyan
CHR                   01;36       # character device driver          | cyan


                                  # file types displayed with highlit background
                                  # ---------------------------------+----------
SETUID                   30;45    # file that is setuid              | magenta
SETGID                   30;43    # file that is setgid              | yellow
CAPABILITY               30;41    # file with capability             | red
OTHER_WRITABLE           30;46    # other-writable, non-sticky dir   | cyan
STICKY                   30;44    # sticky, non-other-writable dir   | blue
STICKY_OTHER_WRITABLE    30;42    # sticky, other-writable dir       | green

# for symlinks, use text styling of target file
LINK target

# yellow archives
.tar   33
.tgz   33
.arc   33
.arj   33
.taz   33
.lha   33
.lz4   33
.lzh   33
.lzma  33
.tlz   33
.txz   33
.tzo   33
.t7z   33
.zip   33
.z     33
.dz    33
.gz    33
.lrz   33
.lz    33
.lzo   33
.xz    33
.zst   33
.tzst  33
.bz2   33
.bz    33
.tbz   33
.tbz2  33
.tz    33
.deb   33
.rpm   33
.jar   33
.war   33
.ear   33
.sar   33
.rar   33
.alz   33
.ace   33
.zoo   33
.cpio  33
.7z    33
.rz    33
.cab   33
.wim   33
.swm   33
.dwm   33
.esd   33

# blue media files
.aac   34
.asf   34
.au    34
.avi   34
.bmp   34
.cgm   34
.dl    34
.emf   34
.flac  34
.flc   34
.fli   34
.flv   34
.gif   34
.gl    34
.jpeg  34
.jpg   34
.m2v   34
.m4a   34
.m4v   34
.mid   34
.midi  34
.mjpeg 34
.mjpg  34
.mka   34
.mkv   34
.mng   34
.mov   34
.mp3   34
.mp4   34
.mp4v  34
.mpc   34
.mpeg  34
.mpg   34
.nuv   34
.oga   34
.ogg   34
.ogm   34
.ogv   34
.ogx   34
.opus  34
.pbm   34
.pcx   34
.pgm   34
.png   34
.ppm   34
.qt    34
.ra    34
.rm    34
.rmvb  34
.spx   34
.svg   34
.svgz  34
.tga   34
.tif   34
.tiff  34
.vob   34
.wav   34
.webm  34
.wmv   34
.xbm   34
.xcf   34
.xpm   34
.xspf  34
.xwd   34
.yuv   34
endauxfile
