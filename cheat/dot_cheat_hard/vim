# File management

:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

# Movement

    k
  h   l         basic motion
    j

w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0               start of line
$               end of line
gg              go to first line in file
G               go to end of file
gk		move down one displayed line
gj		move up one displayed line

# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:

a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file

# Editing

u               undo
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
p               paste after cursor
P               paste before cursor
<Del> or x      delete a character
dd              delete a line
d{motion}       delete text that {motion} moves over

# Search and replace with the `:substitute` (aka `:s`) command

:s/foo/bar/	replace the first match of 'foo' with 'bar' on the current line only
:s/foo/bar/g	replace all matches (`g` flag) of 'foo' with 'bar' on the current line only
:%s/foo/bar/g	replace all matches of 'foo' with 'bar' in the entire file (`:%s`)
:%s/foo/bar/gc	ask to manually confirm (`c` flag) each replacement 

# Preceding a motion or edition with a number repeats it 'n' times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines
42G         go to line 42

### DONAGHS ###
# sudo trick
:w !sudo tee %

# installing plugins
.vim/pack/<name>/start/PLUGIN

# check installed / working plugins
ls $HOME/.vim/pack/*/start/*/plugin | grep '.vim$'
or
tail -n30 $HOME/.vimrc G .git


# location of info on my vim plugins
/home/donagh/sd64/zim/Computer/LINUX/1Linux_Live_USB/02a_install_extras/10vim_settings/vim_plugins.txt
eg cd to above folder and ->% grep <surround>

# vim surround
# to put " around the words bear necessity - with cursor on the b of bear
' ys2w" '
# use ysiw when it's only one word " 

#  to change 'funny' to "funny"
' cs'"'


# tab navigation
gt # next tab
gT # prev tab

# Ranges
:12,34s/old/new/g   # substitute in lines 12 to 34 inclusive
12,$                # from line 12 to end of the file
.,$                 # current to end
%                   # all file
1,$                 # equivalent to %

# tab buffers
vim -p file1.text file2.txt # open files in separate tabs
tabe # edit a new file
H   # previous filetab - alias for gt
L   # next filetab - alias for gT

# " open file at line 23
vim +23 <filename>

# navigate tabs
tab left H
tab right  L


# Check installed plugins
:scriptnames
:help local-additions

# Splits
hor. split  : <Leader> H
ver. split  : <Leader> O
swap splits : Ctrl W Shift R
equalize split : Ctrl W =
maximize split   : Ctrl W _ (hor. split)
maximize split   : Ctrl W | (ver. split)
resize split     :res +5 or :vert res -5

# Terminal in vim
:sp |:terminal

# Turn terminal into a vim file
<C-w> <S-n>
# To exit 
# <C-w> <S-i>
# 

# Navigation
C-B --> back one pane
C-F --> forward one pane

# Open file under cursor - custom keybinding
,vf # open vert. split
,hf # open hor. split

# Insert filename - relative to starting folder. In INSERT MODE:
<C-r>%
# Insert filepath. In INSERT MODE:
,n


# Remember to use Notes (addon)
:Note

# show lines with matching word under cursor
[I

# find non-ascii characters in a vim file
/[^a-zA-Z0-9-: #\/\.,)("']  # Donaghs recipe
/[^\d0-\d127]               # Where d0 represents the first ASCII and d127 the 128th

# uniquify lines in a text
:sort u

# insert a range of lines from another file
:put =readfile('/path/to/foo/foo.c')[146:226]
OR
:r! sed -n 3,7p /path/to/foo/bar.md

# to read in the 3 lines After 'CHALLENGE' in the specified file
:r! grep -A3 "CHALLENGE" /path/to/foo/bar.md

# digraphs :h digraphs
Ctrl K =e <-- euro OR Ctrl K Eu <-- euro

# online vim docs
https://www.vim.org/docs.php

# doom-emacs like save file
:w[SPC]

# source for plugin recommendations
https://catonmat.net/vim-plugins

# bulk rename files using vim and ranger
# cheat rename
#
# change the point at which a sentence wraps
set textwidth=79
#
# get info on character under cursor
ga
g8

# find non-ascii chars in the file
/[^\x00-\x7F]

# replace a non-ascii character 
# example  ”
# and replace that with the ascii "
# 1. cursor over the character and yl to yank into the " register
# :s/<Ctrl-R ">/"/g ie after the first / press Ctrl-R then " to paste
# the contents of the " register into the command line
# after pressing enter the substitution should be made
# for the whole file
:%s/<Ctrl-R ">/"/g 

# to enter that non-ascii character ”
# in insert mode
Ctrl-V u 201d

# to identify what unicode number ” is hover over it and 
ga
# the number after the word Hex is 201d

# resize windows
# Maximize current window
C-W _
# Equalize windows
C-W =
# Incrementally in- de- crease window
C-W +
C-W -
# Increase current window by 10 units
10 C-W +

# DELETE BLANK LINES
:g/^\s*$/d


# <command> | vim - opens a vim file with the output of <command>
ll | vim -


# get the UTF-8 code for the letter under the cursor
# https://vi.stackexchange.com/questions/555/see-the-unicode-code-point-of-the-current-character
ga



