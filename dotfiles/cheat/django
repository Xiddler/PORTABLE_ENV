#start virtualenv
$ python -m venv $HOME/.virtualenvs/django
$ source $HOME/.virtualenvs/django/bin/activate

# webrefs
https://github.com/lucrae/django-cheat-sheet#blue_book-creating-a-project

# install django
$ pip3 install django

# create new project
$ django-admin startproject <project_name>


# run a development server
$ python manage.py runserver

# Create app with 
$ python manage.py startapp <app_name>
# Inside the app folder, create a file called urls.py

# To create a superuser:
$ python manage.py createsuperuser


# Typical folder layout for an app called webpage
.
├── basic_html
│   ├── asgi.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-37.pyc
│   │   ├── settings.cpython-37.pyc
│   │   ├── urls.cpython-37.pyc
│   │   └── wsgi.cpython-37.pyc
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── db.sqlite3
├── manage.py
└── webpage
    ├── admin.py
    ├── apps.py
    ├── __init__.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── urls.py
    ├── tests.py
    └── views.py


# models.py
models.py contains essentially, your database layout, with additional metadata using Classes

# By running makemigrations, you’re telling Django that you’ve made some changes to your models and that you’d like the changes to be stored as a migration.
$ python manage.py makemigrations

#The render() shortcut
#It’s a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the rendered template.k
# BEFORE: return HttpResponse(template.render(context, request))
# AFTER: return render(request, 'polls/index.html', context)
# Important to import the relevant module in each case.
# The render() function takes 
# the request object as its first argument, 
# a template name as its second argument and 
# a dictionary as its optional third argument. 
# It returns an HttpResponse object of the given template rendered with the given context.
